{"version":3,"sources":["scripts.js"],"names":[],"mappingsfile":"scripts.js","sourcesContent":["/*!\n * Clean Blog v1.0.0 (http://startbootstrap.com)\n * Copyright 2014 Start Bootstrap\n * Licensed under Apache 2.0 (https://github.com/IronSummitMedia/startbootstrap/blob/gh-pages/LICENSE)\n */\n\n// Contact Form Scripts\n\n$(function() {\n    /*\n    if($(\"#contactForm\").length){\n        $(\"input,textarea\").jqBootstrapValidation({\n            preventSubmit: true,\n            submitError: function($form, event, errors) {\n                // additional error messages or events\n            },\n            submitSuccess: function($form, event) {\n                event.preventDefault(); // prevent default submit behaviour\n                // get values from FORM\n                var name = $(\"input#name\").val();\n                var email = $(\"input#email\").val();\n                var phone = $(\"input#phone\").val();\n                var message = $(\"textarea#message\").val();\n                var firstName = name; // For Success/Failure Message\n                // Check for white space in name for Success/Fail message\n                if (firstName.indexOf(' ') >= 0) {\n                    firstName = name.split(' ').slice(0, -1).join(' ');\n                }\n                $.ajax({\n                    url: \"/contact\",\n                    type: \"POST\",\n                    data: {\n                        name: name,\n                        phone: phone,\n                        email: email,\n                        message: message\n                    },\n                    cache: false,\n                    success: function() {\n                        // Success message\n                        $('#success').html(\"<div class='alert alert-success'>\");\n                        $('#success > .alert-success').html(\"<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;\")\n                            .append(\"</button>\");\n                        $('#success > .alert-success')\n                            .append(\"<strong>Your message has been sent. </strong>\");\n                        $('#success > .alert-success')\n                            .append('</div>');\n\n                        //clear all fields\n                        $('#contactForm').trigger(\"reset\");\n                    },\n                    error: function() {\n                        // Fail message\n                        $('#success').html(\"<div class='alert alert-danger'>\");\n                        $('#success > .alert-danger').html(\"<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;\")\n                            .append(\"</button>\");\n                        $('#success > .alert-danger').append(\"<strong>Sorry \" + firstName + \", it seems that my mail server is not responding. Please try again later!\");\n                        $('#success > .alert-danger').append('</div>');\n                        //clear all fields\n                        $('#contactForm').trigger(\"reset\");\n                    }\n                })\n            },\n            filter: function() {\n                return $(this).is(\":visible\");\n            }\n        });\n    }\n    */\n    $(\"a[data-toggle=\\\"tab\\\"]\").click(function(e) {\n        e.preventDefault();\n        $(this).tab(\"show\");\n    });\n});\n\n\n/*When clicking on Full hide fail/success boxes */\n$('#name').focus(function() {\n    $('#success').html('');\n});\n\n// jqBootstrapValidation\n// * A plugin for automating validation on Twitter Bootstrap formatted forms.\n// *\n// * v1.3.6\n// *\n// * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\n// *\n// * http://ReactiveRaven.github.com/jqBootstrapValidation/\n\n\n(function( $ ){\n\n    var createdElements = [];\n\n    var defaults = {\n        options: {\n            prependExistingHelpBlock: false,\n            sniffHtml: true, // sniff for 'required', 'maxlength', etc\n            preventSubmit: true, // stop the form submit event from firing if validation fails\n            submitError: false, // function called if there is an error when trying to submit\n            submitSuccess: false, // function called just before a successful submit event is sent to the server\n            semanticallyStrict: false, // set to true to tidy up generated HTML output\n            autoAdd: {\n                helpBlocks: true\n            },\n            filter: function () {\n                // return $(this).is(\":visible\"); // only validate elements you can see\n                return true; // validate everything\n            }\n        },\n        methods: {\n            init : function( options ) {\n\n                var settings = $.extend(true, {}, defaults);\n\n                settings.options = $.extend(true, settings.options, options);\n\n                var $siblingElements = this;\n\n                var uniqueForms = $.unique(\n                    $siblingElements.map( function () {\n                        return $(this).parents(\"form\")[0];\n                    }).toArray()\n                );\n\n                $(uniqueForms).bind(\"submit\", function (e) {\n                    var $form = $(this);\n                    var warningsFound = 0;\n                    var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\n                    $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\n\n                    $inputs.each(function (i, el) {\n                        var $this = $(el),\n                            $controlGroup = $this.parents(\".form-group\").first();\n                        if (\n                            $controlGroup.hasClass(\"warning\")\n                        ) {\n                            $controlGroup.removeClass(\"warning\").addClass(\"error\");\n                            warningsFound++;\n                        }\n                    });\n\n                    $inputs.trigger(\"validationLostFocus.validation\");\n\n                    if (warningsFound) {\n                        if (settings.options.preventSubmit) {\n                            e.preventDefault();\n                        }\n                        $form.addClass(\"error\");\n                        if ($.isFunction(settings.options.submitError)) {\n                            settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\n                        }\n                    } else {\n                        $form.removeClass(\"error\");\n                        if ($.isFunction(settings.options.submitSuccess)) {\n                            settings.options.submitSuccess($form, e);\n                        }\n                    }\n                });\n\n                return this.each(function(){\n\n                    // Get references to everything we're interested in\n                    var $this = $(this),\n                        $controlGroup = $this.parents(\".form-group\").first(),\n                        $helpBlock = $controlGroup.find(\".help-block\").first(),\n                        $form = $this.parents(\"form\").first(),\n                        validatorNames = [];\n\n                    // create message container if not exists\n                    if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\n                        $helpBlock = $('<div class=\"help-block\" />');\n                        $controlGroup.find('.controls').append($helpBlock);\n                        createdElements.push($helpBlock[0]);\n                    }\n\n                    // =============================================================\n                    //                                     SNIFF HTML FOR VALIDATORS\n                    // =============================================================\n\n                    // *snort sniff snuffle*\n\n                    if (settings.options.sniffHtml) {\n                        var message = \"\";\n                        // ---------------------------------------------------------\n                        //                                                   PATTERN\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"pattern\") !== undefined) {\n                            message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\n                            if ($this.data(\"validationPatternMessage\")) {\n                                message = $this.data(\"validationPatternMessage\");\n                            }\n                            $this.data(\"validationPatternMessage\", message);\n                            $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\n                        }\n                        // ---------------------------------------------------------\n                        //                                                       MAX\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\n                            var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\n                            message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\n                            if ($this.data(\"validationMaxMessage\")) {\n                                message = $this.data(\"validationMaxMessage\");\n                            }\n                            $this.data(\"validationMaxMessage\", message);\n                            $this.data(\"validationMaxMax\", max);\n                        }\n                        // ---------------------------------------------------------\n                        //                                                       MIN\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\n                            var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\n                            message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\n                            if ($this.data(\"validationMinMessage\")) {\n                                message = $this.data(\"validationMinMessage\");\n                            }\n                            $this.data(\"validationMinMessage\", message);\n                            $this.data(\"validationMinMin\", min);\n                        }\n                        // ---------------------------------------------------------\n                        //                                                 MAXLENGTH\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"maxlength\") !== undefined) {\n                            message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\n                            if ($this.data(\"validationMaxlengthMessage\")) {\n                                message = $this.data(\"validationMaxlengthMessage\");\n                            }\n                            $this.data(\"validationMaxlengthMessage\", message);\n                            $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\n                        }\n                        // ---------------------------------------------------------\n                        //                                                 MINLENGTH\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"minlength\") !== undefined) {\n                            message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\n                            if ($this.data(\"validationMinlengthMessage\")) {\n                                message = $this.data(\"validationMinlengthMessage\");\n                            }\n                            $this.data(\"validationMinlengthMessage\", message);\n                            $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\n                        }\n                        // ---------------------------------------------------------\n                        //                                                  REQUIRED\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\n                            message = settings.builtInValidators.required.message;\n                            if ($this.data(\"validationRequiredMessage\")) {\n                                message = $this.data(\"validationRequiredMessage\");\n                            }\n                            $this.data(\"validationRequiredMessage\", message);\n                        }\n                        // ---------------------------------------------------------\n                        //                                                    NUMBER\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\n                            message = settings.builtInValidators.number.message;\n                            if ($this.data(\"validationNumberMessage\")) {\n                                message = $this.data(\"validationNumberMessage\");\n                            }\n                            $this.data(\"validationNumberMessage\", message);\n                        }\n                        // ---------------------------------------------------------\n                        //                                                     EMAIL\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\n                            message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\n                            if ($this.data(\"validationValidemailMessage\")) {\n                                message = $this.data(\"validationValidemailMessage\");\n                            } else if ($this.data(\"validationEmailMessage\")) {\n                                message = $this.data(\"validationEmailMessage\");\n                            }\n                            $this.data(\"validationValidemailMessage\", message);\n                        }\n                        // ---------------------------------------------------------\n                        //                                                MINCHECKED\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"minchecked\") !== undefined) {\n                            message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\n                            if ($this.data(\"validationMincheckedMessage\")) {\n                                message = $this.data(\"validationMincheckedMessage\");\n                            }\n                            $this.data(\"validationMincheckedMessage\", message);\n                            $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\n                        }\n                        // ---------------------------------------------------------\n                        //                                                MAXCHECKED\n                        // ---------------------------------------------------------\n                        if ($this.attr(\"maxchecked\") !== undefined) {\n                            message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\n                            if ($this.data(\"validationMaxcheckedMessage\")) {\n                                message = $this.data(\"validationMaxcheckedMessage\");\n                            }\n                            $this.data(\"validationMaxcheckedMessage\", message);\n                            $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\n                        }\n                    }\n\n                    // =============================================================\n                    //                                       COLLECT VALIDATOR NAMES\n                    // =============================================================\n\n                    // Get named validators\n                    if ($this.data(\"validation\") !== undefined) {\n                        validatorNames = $this.data(\"validation\").split(\",\");\n                    }\n\n                    // Get extra ones defined on the element's data attributes\n                    $.each($this.data(), function (i, el) {\n                        var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\n                        if (parts[0] === \"validation\" && parts[1]) {\n                            validatorNames.push(parts[1]);\n                        }\n                    });\n\n                    // =============================================================\n                    //                                     NORMALISE VALIDATOR NAMES\n                    // =============================================================\n\n                    var validatorNamesToInspect = validatorNames;\n                    var newValidatorNamesToInspect = [];\n\n                    do // repeatedly expand 'shortcut' validators into their real validators\n                    {\n                        // Uppercase only the first letter of each name\n                        $.each(validatorNames, function (i, el) {\n                            validatorNames[i] = formatValidatorName(el);\n                        });\n\n                        // Remove duplicate validator names\n                        validatorNames = $.unique(validatorNames);\n\n                        // Pull out the new validator names from each shortcut\n                        newValidatorNamesToInspect = [];\n                        $.each(validatorNamesToInspect, function(i, el) {\n                            if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\n                                // Are these custom validators?\n                                // Pull them out!\n                                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function(i2, el2) {\n                                    newValidatorNamesToInspect.push(el2);\n                                });\n                            } else if (settings.builtInValidators[el.toLowerCase()]) {\n                                // Is this a recognised built-in?\n                                // Pull it out!\n                                var validator = settings.builtInValidators[el.toLowerCase()];\n                                if (validator.type.toLowerCase() === \"shortcut\") {\n                                    $.each(validator.shortcut.split(\",\"), function (i, el) {\n                                        el = formatValidatorName(el);\n                                        newValidatorNamesToInspect.push(el);\n                                        validatorNames.push(el);\n                                    });\n                                }\n                            }\n                        });\n\n                        validatorNamesToInspect = newValidatorNamesToInspect;\n\n                    } while (validatorNamesToInspect.length > 0)\n\n                    // =============================================================\n                    //                                       SET UP VALIDATOR ARRAYS\n                    // =============================================================\n\n                    var validators = {};\n\n                    $.each(validatorNames, function (i, el) {\n                        // Set up the 'override' message\n                        var message = $this.data(\"validation\" + el + \"Message\");\n                        var hasOverrideMessage = (message !== undefined);\n                        var foundValidator = false;\n                        message =\n                            (\n                                message\n                                    ? message\n                                    : \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\n                            )\n                        ;\n\n                        $.each(\n                            settings.validatorTypes,\n                            function (validatorType, validatorTemplate) {\n                                if (validators[validatorType] === undefined) {\n                                    validators[validatorType] = [];\n                                }\n                                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\n                                    validators[validatorType].push(\n                                        $.extend(\n                                            true,\n                                            {\n                                                name: formatValidatorName(validatorTemplate.name),\n                                                message: message\n                                            },\n                                            validatorTemplate.init($this, el)\n                                        )\n                                    );\n                                    foundValidator = true;\n                                }\n                            }\n                        );\n\n                        if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\n\n                            var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\n                            if (hasOverrideMessage) {\n                                validator.message = message;\n                            }\n                            var validatorType = validator.type.toLowerCase();\n\n                            if (validatorType === \"shortcut\") {\n                                foundValidator = true;\n                            } else {\n                                $.each(\n                                    settings.validatorTypes,\n                                    function (validatorTemplateType, validatorTemplate) {\n                                        if (validators[validatorTemplateType] === undefined) {\n                                            validators[validatorTemplateType] = [];\n                                        }\n                                        if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\n                                            $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\n                                            validators[validatorType].push(\n                                                $.extend(\n                                                    validator,\n                                                    validatorTemplate.init($this, el)\n                                                )\n                                            );\n                                            foundValidator = true;\n                                        }\n                                    }\n                                );\n                            }\n                        }\n\n                        if (! foundValidator) {\n                            $.error(\"Cannot find validation info for '\" + el + \"'\");\n                        }\n                    });\n\n                    // =============================================================\n                    //                                         STORE FALLBACK VALUES\n                    // =============================================================\n\n                    $helpBlock.data(\n                        \"original-contents\",\n                        (\n                            $helpBlock.data(\"original-contents\")\n                                ? $helpBlock.data(\"original-contents\")\n                                : $helpBlock.html()\n                        )\n                    );\n\n                    $helpBlock.data(\n                        \"original-role\",\n                        (\n                            $helpBlock.data(\"original-role\")\n                                ? $helpBlock.data(\"original-role\")\n                                : $helpBlock.attr(\"role\")\n                        )\n                    );\n\n                    $controlGroup.data(\n                        \"original-classes\",\n                        (\n                            $controlGroup.data(\"original-clases\")\n                                ? $controlGroup.data(\"original-classes\")\n                                : $controlGroup.attr(\"class\")\n                        )\n                    );\n\n                    $this.data(\n                        \"original-aria-invalid\",\n                        (\n                            $this.data(\"original-aria-invalid\")\n                                ? $this.data(\"original-aria-invalid\")\n                                : $this.attr(\"aria-invalid\")\n                        )\n                    );\n\n                    // =============================================================\n                    //                                                    VALIDATION\n                    // =============================================================\n\n                    $this.bind(\n                        \"validation.validation\",\n                        function (event, params) {\n\n                            var value = getValue($this);\n\n                            // Get a list of the errors to apply\n                            var errorsFound = [];\n\n                            $.each(validators, function (validatorType, validatorTypeArray) {\n                                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\n                                    $.each(validatorTypeArray, function (i, validator) {\n                                        if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\n                                            errorsFound.push(validator.message);\n                                        }\n                                    });\n                                }\n                            });\n\n                            return errorsFound;\n                        }\n                    );\n\n                    $this.bind(\n                        \"getValidators.validation\",\n                        function () {\n                            return validators;\n                        }\n                    );\n\n                    // =============================================================\n                    //                                             WATCH FOR CHANGES\n                    // =============================================================\n                    $this.bind(\n                        \"submit.validation\",\n                        function () {\n                            return $this.triggerHandler(\"change.validation\", {submitting: true});\n                        }\n                    );\n                    $this.bind(\n                        [\n                            \"keyup\",\n                            \"focus\",\n                            \"blur\",\n                            \"click\",\n                            \"keydown\",\n                            \"keypress\",\n                            \"change\"\n                        ].join(\".validation \") + \".validation\",\n                        function (e, params) {\n\n                            var value = getValue($this);\n\n                            var errorsFound = [];\n\n                            $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\n                                var oldCount = errorsFound.length;\n                                $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\n                                    errorsFound.push(message);\n                                });\n                                if (errorsFound.length > oldCount) {\n                                    $(el).attr(\"aria-invalid\", \"true\");\n                                } else {\n                                    var original = $this.data(\"original-aria-invalid\");\n                                    $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\n                                }\n                            });\n\n                            $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\n\n                            errorsFound = $.unique(errorsFound.sort());\n\n                            // Were there any errors?\n                            if (errorsFound.length) {\n                                // Better flag it up as a warning.\n                                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\n\n                                // How many errors did we find?\n                                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\n                                    // Only one? Being strict? Just output it.\n                                    $helpBlock.html(errorsFound[0] +\n                                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n                                } else {\n                                    // Multiple? Being sloppy? Glue them together into an UL.\n                                    $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\n                                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n                                }\n                            } else {\n                                $controlGroup.removeClass(\"warning error success\");\n                                if (value.length > 0) {\n                                    $controlGroup.addClass(\"success\");\n                                }\n                                $helpBlock.html($helpBlock.data(\"original-contents\"));\n                            }\n\n                            if (e.type === \"blur\") {\n                                $controlGroup.removeClass(\"success\");\n                            }\n                        }\n                    );\n                    $this.bind(\"validationLostFocus.validation\", function () {\n                        $controlGroup.removeClass(\"success\");\n                    });\n                });\n            },\n            destroy : function( ) {\n\n                return this.each(\n                    function() {\n\n                        var\n                            $this = $(this),\n                            $controlGroup = $this.parents(\".form-group\").first(),\n                            $helpBlock = $controlGroup.find(\".help-block\").first();\n\n                        // remove our events\n                        $this.unbind('.validation'); // events are namespaced.\n                        // reset help text\n                        $helpBlock.html($helpBlock.data(\"original-contents\"));\n                        // reset classes\n                        $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\n                        // reset aria\n                        $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\n                        // reset role\n                        $helpBlock.attr(\"role\", $this.data(\"original-role\"));\n                        // remove all elements we created\n                        if (createdElements.indexOf($helpBlock[0]) > -1) {\n                            $helpBlock.remove();\n                        }\n\n                    }\n                );\n\n            },\n            collectErrors : function(includeEmpty) {\n\n                var errorMessages = {};\n                this.each(function (i, el) {\n                    var $el = $(el);\n                    var name = $el.attr(\"name\");\n                    var errors = $el.triggerHandler(\"validation.validation\", {includeEmpty: true});\n                    errorMessages[name] = $.extend(true, errors, errorMessages[name]);\n                });\n\n                $.each(errorMessages, function (i, el) {\n                    if (el.length === 0) {\n                        delete errorMessages[i];\n                    }\n                });\n\n                return errorMessages;\n\n            },\n            hasErrors: function() {\n\n                var errorMessages = [];\n\n                this.each(function (i, el) {\n                    errorMessages = errorMessages.concat(\n                        $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {submitting: true}) : []\n                    );\n                });\n\n                return (errorMessages.length > 0);\n            },\n            override : function (newDefaults) {\n                defaults = $.extend(true, defaults, newDefaults);\n            }\n        },\n        validatorTypes: {\n            callback: {\n                name: \"callback\",\n                init: function ($this, name) {\n                    return {\n                        validatorName: name,\n                        callback: $this.data(\"validation\" + name + \"Callback\"),\n                        lastValue: $this.val(),\n                        lastValid: true,\n                        lastFinished: true\n                    };\n                },\n                validate: function ($this, value, validator) {\n                    if (validator.lastValue === value && validator.lastFinished) {\n                        return !validator.lastValid;\n                    }\n\n                    if (validator.lastFinished === true)\n                    {\n                        validator.lastValue = value;\n                        validator.lastValid = true;\n                        validator.lastFinished = false;\n\n                        var rrjqbvValidator = validator;\n                        var rrjqbvThis = $this;\n                        executeFunctionByName(\n                            validator.callback,\n                            window,\n                            $this,\n                            value,\n                            function (data) {\n                                if (rrjqbvValidator.lastValue === data.value) {\n                                    rrjqbvValidator.lastValid = data.valid;\n                                    if (data.message) {\n                                        rrjqbvValidator.message = data.message;\n                                    }\n                                    rrjqbvValidator.lastFinished = true;\n                                    rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\n                                    // Timeout is set to avoid problems with the events being considered 'already fired'\n                                    setTimeout(function () {\n                                        rrjqbvThis.trigger(\"change.validation\");\n                                    }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                                }\n                            }\n                        );\n                    }\n\n                    return false;\n\n                }\n            },\n            ajax: {\n                name: \"ajax\",\n                init: function ($this, name) {\n                    return {\n                        validatorName: name,\n                        url: $this.data(\"validation\" + name + \"Ajax\"),\n                        lastValue: $this.val(),\n                        lastValid: true,\n                        lastFinished: true\n                    };\n                },\n                validate: function ($this, value, validator) {\n                    if (\"\"+validator.lastValue === \"\"+value && validator.lastFinished === true) {\n                        return validator.lastValid === false;\n                    }\n\n                    if (validator.lastFinished === true)\n                    {\n                        validator.lastValue = value;\n                        validator.lastValid = true;\n                        validator.lastFinished = false;\n                        $.ajax({\n                            url: validator.url,\n                            data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\n                            dataType: \"json\",\n                            success: function (data) {\n                                if (\"\"+validator.lastValue === \"\"+data.value) {\n                                    validator.lastValid = !!(data.valid);\n                                    if (data.message) {\n                                        validator.message = data.message;\n                                    }\n                                    validator.lastFinished = true;\n                                    $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                                    // Timeout is set to avoid problems with the events being considered 'already fired'\n                                    setTimeout(function () {\n                                        $this.trigger(\"change.validation\");\n                                    }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                                }\n                            },\n                            failure: function () {\n                                validator.lastValid = true;\n                                validator.message = \"ajax call failed\";\n                                validator.lastFinished = true;\n                                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                                // Timeout is set to avoid problems with the events being considered 'already fired'\n                                setTimeout(function () {\n                                    $this.trigger(\"change.validation\");\n                                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                            }\n                        });\n                    }\n\n                    return false;\n\n                }\n            },\n            regex: {\n                name: \"regex\",\n                init: function ($this, name) {\n                    return {regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))};\n                },\n                validate: function ($this, value, validator) {\n                    return (!validator.regex.test(value) && ! validator.negative)\n                        || (validator.regex.test(value) && validator.negative);\n                }\n            },\n            required: {\n                name: \"required\",\n                init: function ($this, name) {\n                    return {};\n                },\n                validate: function ($this, value, validator) {\n                    return !!(value.length === 0  && ! validator.negative)\n                        || !!(value.length > 0 && validator.negative);\n                },\n                blockSubmit: true\n            },\n            match: {\n                name: \"match\",\n                init: function ($this, name) {\n                    var element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\n                    element.bind(\"validation.validation\", function () {\n                        $this.trigger(\"change.validation\", {submitting: true});\n                    });\n                    return {\"element\": element};\n                },\n                validate: function ($this, value, validator) {\n                    return (value !== validator.element.val() && ! validator.negative)\n                        || (value === validator.element.val() && validator.negative);\n                },\n                blockSubmit: true\n            },\n            max: {\n                name: \"max\",\n                init: function ($this, name) {\n                    return {max: $this.data(\"validation\" + name + \"Max\")};\n                },\n                validate: function ($this, value, validator) {\n                    return (parseFloat(value, 10) > parseFloat(validator.max, 10) && ! validator.negative)\n                        || (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\n                }\n            },\n            min: {\n                name: \"min\",\n                init: function ($this, name) {\n                    return {min: $this.data(\"validation\" + name + \"Min\")};\n                },\n                validate: function ($this, value, validator) {\n                    return (parseFloat(value) < parseFloat(validator.min) && ! validator.negative)\n                        || (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\n                }\n            },\n            maxlength: {\n                name: \"maxlength\",\n                init: function ($this, name) {\n                    return {maxlength: $this.data(\"validation\" + name + \"Maxlength\")};\n                },\n                validate: function ($this, value, validator) {\n                    return ((value.length > validator.maxlength) && ! validator.negative)\n                        || ((value.length <= validator.maxlength) && validator.negative);\n                }\n            },\n            minlength: {\n                name: \"minlength\",\n                init: function ($this, name) {\n                    return {minlength: $this.data(\"validation\" + name + \"Minlength\")};\n                },\n                validate: function ($this, value, validator) {\n                    return ((value.length < validator.minlength) && ! validator.negative)\n                        || ((value.length >= validator.minlength) && validator.negative);\n                }\n            },\n            maxchecked: {\n                name: \"maxchecked\",\n                init: function ($this, name) {\n                    var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n                    elements.bind(\"click.validation\", function () {\n                        $this.trigger(\"change.validation\", {includeEmpty: true});\n                    });\n                    return {maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"), elements: elements};\n                },\n                validate: function ($this, value, validator) {\n                    return (validator.elements.filter(\":checked\").length > validator.maxchecked && ! validator.negative)\n                        || (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\n                },\n                blockSubmit: true\n            },\n            minchecked: {\n                name: \"minchecked\",\n                init: function ($this, name) {\n                    var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n                    elements.bind(\"click.validation\", function () {\n                        $this.trigger(\"change.validation\", {includeEmpty: true});\n                    });\n                    return {minchecked: $this.data(\"validation\" + name + \"Minchecked\"), elements: elements};\n                },\n                validate: function ($this, value, validator) {\n                    return (validator.elements.filter(\":checked\").length < validator.minchecked && ! validator.negative)\n                        || (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\n                },\n                blockSubmit: true\n            }\n        },\n        builtInValidators: {\n            email: {\n                name: \"Email\",\n                type: \"shortcut\",\n                shortcut: \"validemail\"\n            },\n            validemail: {\n                name: \"Validemail\",\n                type: \"regex\",\n                regex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\n                message: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\n            },\n            passwordagain: {\n                name: \"Passwordagain\",\n                type: \"match\",\n                match: \"password\",\n                message: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\n            },\n            positive: {\n                name: \"Positive\",\n                type: \"shortcut\",\n                shortcut: \"number,positivenumber\"\n            },\n            negative: {\n                name: \"Negative\",\n                type: \"shortcut\",\n                shortcut: \"number,negativenumber\"\n            },\n            number: {\n                name: \"Number\",\n                type: \"regex\",\n                regex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\n                message: \"Must be a number<!-- data-validator-number-message to override -->\"\n            },\n            integer: {\n                name: \"Integer\",\n                type: \"regex\",\n                regex: \"[+-]?\\\\\\d+\",\n                message: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\n            },\n            positivenumber: {\n                name: \"Positivenumber\",\n                type: \"min\",\n                min: 0,\n                message: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\n            },\n            negativenumber: {\n                name: \"Negativenumber\",\n                type: \"max\",\n                max: 0,\n                message: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\n            },\n            required: {\n                name: \"Required\",\n                type: \"required\",\n                message: \"This is required<!-- data-validator-required-message to override -->\"\n            },\n            checkone: {\n                name: \"Checkone\",\n                type: \"minchecked\",\n                minchecked: 1,\n                message: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\n            }\n        }\n    };\n\n    var formatValidatorName = function (name) {\n        return name\n            .toLowerCase()\n            .replace(\n            /(^|\\s)([a-z])/g ,\n            function(m,p1,p2) {\n                return p1+p2.toUpperCase();\n            }\n        )\n            ;\n    };\n\n    var getValue = function ($this) {\n        // Extract the value we're talking about\n        var value = $this.val();\n        var type = $this.attr(\"type\");\n        if (type === \"checkbox\") {\n            value = ($this.is(\":checked\") ? value : \"\");\n        }\n        if (type === \"radio\") {\n            value = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\n        }\n        return value;\n    };\n\n    function regexFromString(inputstring) {\n        return new RegExp(\"^\" + inputstring + \"$\");\n    }\n\n    /**\n     * Thanks to Jason Bunting via StackOverflow.com\n     *\n     * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\n     * Short link: http://tinyurl.com/executeFunctionByName\n     **/\n    function executeFunctionByName(functionName, context /*, args*/) {\n        var args = Array.prototype.slice.call(arguments).splice(2);\n        var namespaces = functionName.split(\".\");\n        var func = namespaces.pop();\n        for(var i = 0; i < namespaces.length; i++) {\n            context = context[namespaces[i]];\n        }\n        return context[func].apply(this, args);\n    }\n\n    $.fn.jqBootstrapValidation = function( method ) {\n\n        if ( defaults.methods[method] ) {\n            return defaults.methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n        } else if ( typeof method === 'object' || ! method ) {\n            return defaults.methods.init.apply( this, arguments );\n        } else {\n            $.error( 'Method ' +  method + ' does not exist on jQuery.jqBootstrapValidation' );\n            return null;\n        }\n\n    };\n\n    $.jqBootstrapValidation = function (options) {\n        $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this,arguments);\n    };\n\n})( jQuery );\n\n// Floating label headings for the contact form\n$(function() {\n    $(\"body\").on(\"input propertychange\", \".floating-label-form-group\", function(e) {\n        $(this).toggleClass(\"floating-label-form-group-with-value\", !!$(e.target).val());\n    }).on(\"focus\", \".floating-label-form-group\", function() {\n        $(this).addClass(\"floating-label-form-group-with-focus\");\n    }).on(\"blur\", \".floating-label-form-group\", function() {\n        $(this).removeClass(\"floating-label-form-group-with-focus\");\n    });\n});\n\n// Navigation Scripts to Show Header on Scroll-Up\njQuery(document).ready(function($) {\n    var MQL = 1170;\n\n    //primary navigation slide-in effect\n    if ($(window).width() > MQL) {\n        var headerHeight = $('.navbar-custom').height();\n        $(window).on('scroll', {\n                previousTop: 0\n            },\n            function() {\n                var currentTop = $(window).scrollTop();\n                //check if user is scrolling up\n                if (currentTop < this.previousTop) {\n                    //if scrolling up...\n                    if (currentTop > 0 && $('.navbar-custom').hasClass('is-fixed')) {\n                        $('.navbar-custom').addClass('is-visible');\n                    } else {\n                        $('.navbar-custom').removeClass('is-visible is-fixed');\n                    }\n                } else {\n                    //if scrolling down...\n                    $('.navbar-custom').removeClass('is-visible');\n                    if (currentTop > headerHeight && !$('.navbar-custom').hasClass('is-fixed')) $('.navbar-custom').addClass('is-fixed');\n                }\n                this.previousTop = currentTop;\n            });\n    }\n\n    // Initialize tooltips\n    $('[data-toggle=\"tooltip\"]').tooltip();\n});\n"],"sourceRoot":"/source/"}